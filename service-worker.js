"use strict";var precacheConfig=[["/myprofile/index.html","003f1eb1fb0000760ded63252e68211b"],["/myprofile/static/css/main.e7db9436.css","22156fc699139b573870734709d5a830"],["/myprofile/static/js/0.dd0270a2.chunk.js","03b1416ab3e1b72d4eb865390ae428a3"],["/myprofile/static/js/main.3b697a47.js","3f9e8de703f79f4afc4bafa2d78af74a"],["/myprofile/static/media/GitHub.ab5c16f8.svg","ab5c16f8f783c687fd8022657aeb1b3a"],["/myprofile/static/media/coding.b2cddcb7.svg","b2cddcb7054bea085a48cc7206139194"],["/myprofile/static/media/css.2b7bc787.svg","2b7bc787fe5c0397f5bfafdea784c8db"],["/myprofile/static/media/europe-ext.0cb3f228.woff2","0cb3f2281435db395235a51983ad554d"],["/myprofile/static/media/europe-ext.5203e921.woff","5203e921fb63f78897fa68eb662f7e69"],["/myprofile/static/media/git.6e3db95f.svg","6e3db95f22a57f92459c3b20a93977c4"],["/myprofile/static/media/github-logo.aaaf531a.svg","aaaf531a1b6d28ab6e420dc43da0f5eb"],["/myprofile/static/media/github.6d7519f8.svg","6d7519f821c0b922699399e1507da5fa"],["/myprofile/static/media/how.227566dc.WebP","227566dcb937cac30093af8522fe7f95"],["/myprofile/static/media/html.997d401f.svg","997d401f0a6084c9c088361b3e98ffe8"],["/myprofile/static/media/javascript.d8c3b7fd.svg","d8c3b7fdc670a7b6eb0d5b4ed93f1ce8"],["/myprofile/static/media/me.1942824f.WebP","1942824f253205a902dbf3709d32d12d"],["/myprofile/static/media/mesto.ae9db7ea.WebP","ae9db7ea48a8c3713c7f73ed678aa824"],["/myprofile/static/media/movies.b01a2c45.WebP","b01a2c457baae644c89ec9402313bb91"],["/myprofile/static/media/paul.b6e41020.jpg","b6e410208127b416276ee948e52f4543"],["/myprofile/static/media/russian.c7076311.WebP","c70763114c1d3eb2f51623ddf20f9059"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,t){var a=new URL(e);return"/"===a.pathname.slice(-1)&&(a.pathname+=t),a.toString()},cleanResponse=function(t){return t.redirected?("body"in t?Promise.resolve(t.body):t.blob()).then(function(e){return new Response(e,{headers:t.headers,status:t.status,statusText:t.statusText})}):Promise.resolve(t)},createCacheKey=function(e,t,a,r){var n=new URL(e);return r&&n.pathname.match(r)||(n.search+=(n.search?"&":"")+encodeURIComponent(t)+"="+encodeURIComponent(a)),n.toString()},isPathWhitelisted=function(e,t){if(0===e.length)return!0;var a=new URL(t).pathname;return e.some(function(e){return a.match(e)})},stripIgnoredUrlParameters=function(e,a){var t=new URL(e);return t.hash="",t.search=t.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(t){return a.every(function(e){return!e.test(t[0])})}).map(function(e){return e.join("=")}).join("&"),t.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var t=e[0],a=e[1],r=new URL(t,self.location),n=createCacheKey(r,hashParamName,a,/\.\w{8}\./);return[r.toString(),n]}));function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(r){return setOfCachedUrls(r).then(function(a){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(t){if(!a.has(t)){var e=new Request(t,{credentials:"same-origin"});return fetch(e).then(function(e){if(!e.ok)throw new Error("Request for "+t+" returned a response with status "+e.status);return cleanResponse(e).then(function(e){return r.put(t,e)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var a=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(t){return t.keys().then(function(e){return Promise.all(e.map(function(e){if(!a.has(e.url))return t.delete(e)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(t){if("GET"===t.request.method){var e,a=stripIgnoredUrlParameters(t.request.url,ignoreUrlParametersMatching),r="index.html";(e=urlsToCacheKeys.has(a))||(a=addDirectoryIndex(a,r),e=urlsToCacheKeys.has(a));var n="/myprofile/index.html";!e&&"navigate"===t.request.mode&&isPathWhitelisted(["^(?!\\/__).*"],t.request.url)&&(a=new URL(n,self.location).toString(),e=urlsToCacheKeys.has(a)),e&&t.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(a)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(e){return console.warn('Couldn\'t serve response for "%s" from cache: %O',t.request.url,e),fetch(t.request)}))}});